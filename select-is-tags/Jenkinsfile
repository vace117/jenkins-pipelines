import groovy.json.JsonSlurper

String availableTags = "NOT FETCHED"

/**
 * Returns a list of '\n' separated tags available in the specified image stream
 */
String fetchImageStreamTags(String imageStreamName) {
    // Get ImageStream data in JSON format
    //
    String result = sh( 
      script: "oc get is ${imageStreamName} -o json", 
      returnStdout: true 
    )

    // Parse JSON
    //
    List tags = new JsonSlurper().parseText(result).spec?.tags
    if ( tags && !tags.isEmpty() ) {
      String parsedOutTags = tags
                              .collect { it.name }
                              .join('\n');
      
      echo """
========= Available Tags =========
${parsedOutTags}
==================================
"""
      return parsedOutTags
    }
    else {
      error("Could not fetch any tags from Project: '${env.PROJECT_NAME}', ImageStream: '${imageStreamName}'")
    }
}

try {
  node {
    stage("Fetch Image Tags") {
      timeout(time: 20, unit: 'SECONDS') {
        openshift.withCluster() {
          openshift.withProject(env.PROJECT_NAME) {
            availableTags = fetchImageStreamTags(env.IMAGE_STREAM)
          }
        }  
      }
    }
    stage("User Action: Image Tag Selection") {
        timeout(time: 5, unit: 'MINUTES') {
          echo "Waiting for user to select a tag..."

            // Show the select input modal
          String selectedTag = input(
            message: 'Please Provide Parameters', 
            ok: 'Next', 
            parameters: [
              choice(name: 'IMAGE_TAG', choices: availableTags, description: 'Select the Build Number you wish to deploy')
            ]
          )

          echo """
=============================
User selected tag: ${selectedTag}
=============================
"""
          env.IMAGE_TAG = selectedTag
        }
    }
    stage("Use Input") {
        echo "User input: ${env.IMAGE_TAG}"
    }
  }
} catch (err) {
  echo "in catch block"
  echo "Caught: ${err}"
  currentBuild.result = 'FAILURE'
  throw err
}