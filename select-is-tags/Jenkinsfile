import groovy.json.JsonSlurper

def rtags = ""

def getTags() {
    def cmd = [ 'bash', '-c', "oc get is ${env.IMAGE_STREAM} -o json -n ${env.PROJECT_NAME}".toString() ]
    def result = cmd.execute().text
    echo "Result: ${result}"
    def slurper = new JsonSlurper()
    def json = slurper.parseText(result)
    def tags = new ArrayList()
    if (json.spec.tags == null || json.spec.tags.size == 0) {
      tags.add("unable to fetch tags for pipeline-tags")
    } else {
      json.spec.tags.each { tags.add(it.name) }
    }
    return tags.join('\n')
}

try {
  node {
    stage("Get Tags") {
      timeout(time: 20, unit: 'SECONDS') {
        openshift.withCluster() {
          openshift.withProject("${env.PROJECT_NAME}") {
            rtags = getTags()
            echo rtags
          }
        }  
      }
    }
    stage("Get User Input") {
        timeout(time: 5, unit: 'MINUTES') {
            // Show the select input modal
          Map<String, String> userInput = input(message: 'Please Provide Parameters', ok: 'Next', parameters: 
            [
              choice(name: 'ENVIRONMENT', choices: ['dev','qa'].join('\n'), description: 'Please select the Environment'),
              choice(name: 'IMAGE_TAG', choices: rtags, description: 'Available Versions')
            ]
          )

          echo "============================="
          echo userInput.toString()
          echo "============================="
          
          env.ENVIRONMENT = userInput.ENVIRONMENT
          env.IMAGE_TAG = userInput.IMAGE_TAG
        }
    }
    stage("Use Input") {
        echo "User input: ${env.IMAGE_TAG}"
    }
  }
} catch (err) {
  echo "in catch block"
  echo "Caught: ${err}"
  currentBuild.result = 'FAILURE'
  throw err
}