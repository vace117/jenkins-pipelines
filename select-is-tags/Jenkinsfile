import groovy.json.JsonSlurper
import net.sf.json.JSONObject
import groovy.json.JsonBuilder

String userSelectedTag = null

env.IMAGE_STREAM_METADATA_FILE = 'image-stream-metadata.json'

/**
 * 
 */
String _debugPrintObject(object) { new JsonBuilder(object).toPrettyString() }

/**
 * Saves ImageStream metadata for the given name into a file in the workspace
 */
void initImageStreamMetaData(String imageStreamName) {
    // Get ImageStream data in JSON format
    //
    String result = sh( 
      script: "oc get is ${imageStreamName} -o json", 
      returnStdout: true 
    )

    // Save the data into a file in our workspace. This allows us to easily access this info from anywhere in the build
    //
    writeJSON(
      file: env.IMAGE_STREAM_METADATA_FILE, 
      json: new JSONObject(new JsonSlurper().parseText(result))
    )
}

/**
 * Reads ImageStream metadata from file
 */
def getImageStreamMetadata() {
  readJSON(file: env.IMAGE_STREAM_METADATA_FILE)
}

/**
 * Returns a list of '\n' separated tags available in the specified image stream
 */
String extractImageStreamTags() {
    List tags = getImageStreamMetadata().spec?.tags
    if ( tags && !tags.isEmpty() ) {
      String parsedOutTags = tags
                              .collect { it.name }
                              .join('\n');
      
      echo """
========= Available Tags =========
${parsedOutTags}
==================================
"""
      return parsedOutTags
    }
    else {
      error("Could not fetch any tags from Project: '${env.PROJECT_NAME}', ImageStream: '${imageStreamName}'")
    }
}



/** ************************************************************************************
 *                               Pipeline code starts here
 * *************************************************************************************/
try {
  node {

    stage("Fetch Image Tags") {
      timeout(time: 20, unit: 'SECONDS') {
        openshift.withCluster() {
          openshift.withProject(env.PROJECT_NAME) {
            // Initialize ImageStream metadata
            //
            initImageStreamMetaData(env.IMAGE_STREAM);
          }
        }  
      }
    }
    
    
    stage("User Action: Image Tag Selection") {
        timeout(time: 5, unit: 'MINUTES') {
          echo "Waiting for user to select a tag..."

          // Pops up a window with a drop-down to collect user input
          //
          userSelectedTag = "Build-6.3.0.VALTOR"
          // userSelectedTag = input(
          //   message: 'Please Provide Parameters', 
          //   ok: 'Next', 
          //   parameters: [
          //     choice(name: 'IMAGE_TAG', choices: extractImageStreamTags(), description: 'Select the Build Number you wish to deploy')
          //   ]
          // )
        }
    }
    
    
    stage("Run DB Migrations") {
        echo """
=============================
User selected tag: ${userSelectedTag}
=============================
"""
        String migrationsJobName = "${env.IMAGE_STREAM}-job"

        timeout(time: 5, unit: 'MINUTES') {
          openshift.withCluster() {
            openshift.withProject(env.PROJECT_NAME) {

              // Delete this job if it already exists
              //
              def jobSelector = openshift.selector("job", migrationsJobName)
              if ( jobSelector.exists() ) {
                echo "Deleting pre-existing ${migrationsJobName}..."
                jobSelector.delete()
              }

              // Create and run the job
              //
              def jobDefinition = [
                "apiVersion": "batch/v1",
                "kind": "Job",
                "metadata": [
                  "name": migrationsJobName,
                  "namespace": env.PROJECT_NAME
                ],
                "spec": [
                  "backoffLimit": 1,
                  "completions": 1,
                  "parallelism": 1,
                  "template": [
                    "metadata": [
                      "labels": 
                      [
                        "job-name": migrationsJobName,
                        "run": migrationsJobName
                      ]
                    ],
                    "spec": [
                      "containers": [
                        [
                          "env": [
                            ["name": "DB_ENV_NAME",  "value": "gen12dvu_test"],
                            ["name": "FLYWAY_TASKS", "value": "info"]
                          ],
                          "image": "${env.IMAGE_STREAM}:${userSelectedTag}",
                          "imagePullPolicy": "IfNotPresent",
                          "name": migrationsJobName
                        ]
                      ],
                      "restartPolicy": "Never"
                    ]
                  ]
                ]
              ]

              jobSelector = openshift.create( jobDefinition )
              echo "Job Created:"
              jobSelector.describe()

              // Get the Pod scheduled to run this job, and wait for it to run or fail
              //
              echo "Finding related pod:"
              def podSelector = jobSelector.related( 'pods' )
              podSelector.describe()
              podSelector.untilEach {
                ['Running', 'Failed'].contains(it.object().status.phase)
              }

              // Follow the logs of this pod
              //
              def migrationResult = podSelector.logs("--follow")
              // echo "Log Command:\n    ${migrationResult.actions[0].cmd}"
              // echo "Log Output: \n    ${_debugPrintObject(migrationResult)}"
            }
          }
        }
    }


  }
} catch (err) {
  echo "in catch block"
  echo "Caught: ${err}"
  currentBuild.result = 'FAILURE'
  throw err
}